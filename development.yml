version: "3.4"

services:
## App Frontend
  core:
    build: ./core
    container_name: "sdg-server-${DEPLOY_TYPE}-core"
    restart: unless-stopped
    logging:
      options:
        max-size: '2m'
        max-file: '10'
    ports:
      - "127.0.0.1:8000:8000"
    environment:
      - DJANGO_ENV_LOADED=True
      - DJANGO_DEBUG=True
    env_file:
      - 'core/env.core'
      - 'core/secrets.core'
      - 'core/env.rabbitmq'
      - 'core/secrets.rabbitmq'
      - 'postgres/secrets.postgres'
      - 'redis/env.redis'
      - 'redis/secrets.redis'
    networks:
      - backend
      - frontend
    depends_on:
      - postgres

  grafana:
    image: grafana/grafana:5.4.3
    container_name: grafana
    restart: unless-stopped
    logging:
      options:
        max-size: '2m'
        max-file: '10'
    ports:
      - "127.0.0.1:3000:3000"
    env_file:
      - 'grafana/env.grafana'
      - 'grafana/secrets.grafana'
    networks:
      - backend
      - frontend
    volumes:
      - grafana-data:/var/lib/grafana
      - grafana-config:/etc/grafana/
    depends_on:
      - postgres

  planner:
    build: ./planner
    container_name: planner
    restart: unless-stopped
    logging:
      options:
        max-size: '2m'
        max-file: '10'
    ports:
      - "127.0.0.1:4200:4200"
    networks:
      - frontend
    depends_on:
      - core

## App Backend
  postgres:
    image: timescale/timescaledb:latest-pg12
    container_name: "sdg-server-${DEPLOY_TYPE}-postgres"
    restart: unless-stopped
    logging:
      options:
        max-size: '2m'
        max-file: '10'
    env_file:
      - 'postgres/secrets.postgres'
    networks:
      - backend
    volumes:
      - postgres-data-12:/var/lib/postgresql/data
    
  minio:
    image: minio/minio:RELEASE.2021-03-26T00-00-41Z
    container_name: "sdg-server-${DEPLOY_TYPE}-minio"
    restart: unless-stopped
    command:
      server /data
    logging:
      options:
        max-size: '2m'
        max-file: '10'
    env_file:
      - 'minio/secrets.minio'
    networks:
      - backend
    volumes:
      - minio-data:/data

  redis:
    image: redis:6.0.8-alpine
    container_name: redis
    restart: unless-stopped
    command: |
      sh -c "\
        if [ -z $${REDIS_PASSWORD:-} ]; then
          redis-server
        else
          redis-server --requirepass $$REDIS_PASSWORD
        fi"
    env_file:
      - 'redis/secrets.redis'
    networks:
      - backend
    
  rabbitmq:
    image: rabbitmq:3
    container_name: rabbitmq
    restart: unless-stopped
    logging:
      options:
        max-size: '2m'
        max-file: '10'
    env_file:
      - 'core/env.rabbitmq'
      - 'core/secrets.rabbitmq'
    networks:
      - backend
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq

networks:
  backend:
  frontend:

volumes:
  grafana-data:
    name: "sdg-server-${DEPLOY_TYPE}-grafana-data"
  grafana-config:
    name: "sdg-server-${DEPLOY_TYPE}-grafana-config"
  postgres-data-12:
    name: "sdg-server-${DEPLOY_TYPE}-postgres-data-12"
  minio-data:
    name: "sdg-server-${DEPLOY_TYPE}-minio-data"
  rabbitmq-data:
    name: "sdg-server-${DEPLOY_TYPE}-rabbitmq-data"
