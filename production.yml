version: "3.4"

services:
## App Frontend
  core:
    build: ./core
    container_name: "sdg-server-${DEPLOY_TYPE}-core"
    restart: unless-stopped
    logging:
      options:
        max-size: '2m'
        max-file: '10'
    env_file:
      - 'core/env.core'
      - 'core/secrets.core'
      - 'core/env.rabbitmq'
      - 'core/secrets.rabbitmq'
      - 'postgres/secrets.postgres'
      - 'redis/env.redis'
      - 'redis/secrets.redis'
    networks:
      - backend
      - frontend
    depends_on:
      - postgres
    labels:
    - "traefik.enable=true"
    - "traefik.http.routers.sdg-server-${DEPLOY_TYPE}-core.rule=Host(`${CORE_DOMAIN}`)"
    - "traefik.http.routers.sdg-server-${DEPLOY_TYPE}-core.entrypoints=web"
    - "traefik.http.routers.sdg-server-${DEPLOY_TYPE}-core.service=noop@internal"
    - "traefik.http.routers.sdg-server-${DEPLOY_TYPE}-core.middlewares=sdg-server-${DEPLOY_TYPE}-core-https-redirect"
    - "traefik.http.middlewares.sdg-server-${DEPLOY_TYPE}-core-https-redirect.redirectscheme.scheme=https"

    - "traefik.http.routers.sdg-server-${DEPLOY_TYPE}-core-secure.rule=Host(`${CORE_DOMAIN}`)"
    - "traefik.http.routers.sdg-server-${DEPLOY_TYPE}-core-secure.entrypoints=websecure"
    - "traefik.http.routers.sdg-server-${DEPLOY_TYPE}-core-secure.service=sdg-server-${DEPLOY_TYPE}-core-service"
    - "traefik.http.routers.sdg-server-${DEPLOY_TYPE}-core-secure.tls.certresolver=myresolver"
    - "traefik.http.services.sdg-server-${DEPLOY_TYPE}-core-service.loadbalancer.server.port=8000"
    - "traefik.docker.network=gateway"
  
  minio:
    image: minio/minio:RELEASE.2021-03-26T00-00-41Z
    container_name: "sdg-server-${DEPLOY_TYPE}-minio"
    restart: unless-stopped
    command:
      server /data
    logging:
      options:
        max-size: '2m'
        max-file: '10'
    env_file:
      - 'minio/secrets.minio'
    networks:
      - frontend
    volumes:
      - minio-data:/data
    labels:
    - "traefik.enable=true"
    - "traefik.http.routers.sdg-server-${DEPLOY_TYPE}-minio.rule=Host(`${MINIO_DOMAIN}`)"
    - "traefik.http.routers.sdg-server-${DEPLOY_TYPE}-minio.entrypoints=web"
    - "traefik.http.routers.sdg-server-${DEPLOY_TYPE}-minio.service=noop@internal"
    - "traefik.http.routers.sdg-server-${DEPLOY_TYPE}-minio.middlewares=sdg-server-${DEPLOY_TYPE}-minio-https-redirect"
    - "traefik.http.middlewares.sdg-server-${DEPLOY_TYPE}-minio-https-redirect.redirectscheme.scheme=https"

    - "traefik.http.routers.sdg-server-${DEPLOY_TYPE}-minio-secure.rule=Host(`${MINIO_DOMAIN}`)"
    - "traefik.http.routers.sdg-server-${DEPLOY_TYPE}-minio-secure.entrypoints=websecure"
    - "traefik.http.routers.sdg-server-${DEPLOY_TYPE}-minio-secure.service=sdg-server-${DEPLOY_TYPE}-minio-service"
    - "traefik.http.routers.sdg-server-${DEPLOY_TYPE}-minio-secure.tls.certresolver=myresolver"
    - "traefik.http.services.sdg-server-${DEPLOY_TYPE}-minio-service.loadbalancer.server.port=8000"
    - "traefik.docker.network=gateway"

## App Backend
  postgres:
    image: timescale/timescaledb:latest-pg12
    container_name: "sdg-server-${DEPLOY_TYPE}-postgres"
    restart: unless-stopped
    logging:
      options:
        max-size: '2m'
        max-file: '10'
    env_file:
      - 'postgres/secrets.postgres'
    networks:
      - backend
    volumes:
      - postgres-data-12:/var/lib/postgresql/data

  redis:
    image: redis:6.0.8-alpine
    container_name: "sdg-server-${DEPLOY_TYPE}-redis"
    restart: unless-stopped
    command: |
      sh -c "\
        if [ -z $${REDIS_PASSWORD:-} ]; then
          redis-server
        else
          redis-server --requirepass $$REDIS_PASSWORD
        fi"
    env_file:
      - 'redis/secrets.redis'
    networks:
      - backend
    
  rabbitmq:
    image: rabbitmq:3
    container_name: "sdg-server-${DEPLOY_TYPE}-rabbitmq"
    restart: unless-stopped
    logging:
      options:
        max-size: '2m'
        max-file: '10'
    env_file:
      - 'core/env.rabbitmq'
      - 'core/secrets.rabbitmq'
    networks:
      - backend
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq

networks:
  backend:
  frontend:
    external: 
      name: gateway
