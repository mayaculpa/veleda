# Generated by Django 3.1.7 on 2021-02-24 16:59

from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('iot', '0002_add_hypertable'),
    ]

    operations = [
        migrations.CreateModel(
            name='HydroponicSystemComponent',
            fields=[
                ('site_entity', models.OneToOneField(help_text='Which site entity the component is a part of.', on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='hydroponic_system_component', serialize=False, to='iot.siteentity')),
                ('hydroponic_system_type', models.CharField(choices=[('NFT', 'NFT System'), ('FloodDrain', 'Flood & Drain System'), ('Vertical', 'Vertical System'), ('DWC', 'DWC System')], help_text='The type of hydroponic system', max_length=64)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The datetime of creation.')),
                ('modified_at', models.DateTimeField(auto_now=True, help_text='The datetime of the last update.')),
            ],
        ),
        migrations.CreateModel(
            name='PlantFamily',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='The name of the plant family.', max_length=100)),
            ],
            options={
                'verbose_name_plural': 'Plant families',
            },
        ),
        migrations.CreateModel(
            name='PlantGenus',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='The name of the plant genus.', max_length=100)),
                ('family', models.ForeignKey(help_text='The family to which the genus belongs to', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='genus_set', to='greenhouse.plantfamily')),
            ],
            options={
                'verbose_name_plural': 'Plant genera',
            },
        ),
        migrations.CreateModel(
            name='WaterCycle',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='The name of the water cycle', max_length=128)),
            ],
        ),
        migrations.CreateModel(
            name='WaterCycleComponent',
            fields=[
                ('site_entity', models.OneToOneField(help_text='Which site entity the component is a part of.', on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='water_cycle_component', serialize=False, to='iot.siteentity')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The datetime of creation.')),
                ('modified_at', models.DateTimeField(auto_now=True, help_text='The datetime of the last update.')),
            ],
        ),
        migrations.CreateModel(
            name='WaterPipe',
            fields=[
                ('water_cycle_component', models.OneToOneField(help_text='To which water cycle component it belongs.', on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='water_pipe', serialize=False, to='greenhouse.watercyclecomponent')),
                ('length', models.FloatField(help_text='The length of the pipe in meters.')),
            ],
        ),
        migrations.CreateModel(
            name='WaterPump',
            fields=[
                ('water_cycle_component', models.OneToOneField(help_text='To which water cycle component it belongs.', on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='water_pump', serialize=False, to='greenhouse.watercyclecomponent')),
            ],
        ),
        migrations.CreateModel(
            name='WaterReservoir',
            fields=[
                ('water_cycle_component', models.OneToOneField(help_text='To which water cycle component it belongs.', on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='water_reservoir', serialize=False, to='greenhouse.watercyclecomponent')),
                ('max_capacity', models.FloatField(help_text='The max capacity in liters.')),
                ('max_water_level', models.FloatField(help_text='The max water level in meters.')),
            ],
        ),
        migrations.CreateModel(
            name='WaterSensor',
            fields=[
                ('water_cycle_component', models.OneToOneField(help_text='To which water cycle component it belongs.', on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='water_sensor', serialize=False, to='greenhouse.watercyclecomponent')),
                ('sensor_type', models.CharField(choices=[('InvalidSensor', 'Invalid sensor'), ('Temperature', 'Temperature sensor'), ('PhMeter', 'pH meter'), ('EcMeter', 'EC meter'), ('TdsMeter', 'TDS meter'), ('TurbidityMeter', 'Turbidity meter')], help_text='The sensor type.', max_length=64)),
            ],
        ),
        migrations.CreateModel(
            name='WaterValve',
            fields=[
                ('water_cycle_component', models.OneToOneField(help_text='To which water cycle component it belongs.', on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='water_valve', serialize=False, to='greenhouse.watercyclecomponent')),
            ],
        ),
        migrations.CreateModel(
            name='WaterCycleFlowsTo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('flows_from', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='flows_to_edges', to='greenhouse.watercyclecomponent')),
                ('flows_to', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='flows_from_edges', to='greenhouse.watercyclecomponent')),
            ],
        ),
        migrations.AddField(
            model_name='watercyclecomponent',
            name='flows_to_set',
            field=models.ManyToManyField(help_text='Add me.', related_name='flows_from_set', through='greenhouse.WaterCycleFlowsTo', to='greenhouse.WaterCycleComponent'),
        ),
        migrations.AddField(
            model_name='watercyclecomponent',
            name='water_cycle',
            field=models.ForeignKey(help_text='To which water cycle this site entity belongs to.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='greenhouse.watercycle'),
        ),
        migrations.CreateModel(
            name='TrackingImage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('image_id', models.CharField(help_text='The ID encoded in the tracking image', max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The datetime of creation.')),
                ('modified_at', models.DateTimeField(auto_now=True, help_text='The datetime of the last update.')),
                ('hydroponic_system', models.ForeignKey(help_text='The hydroponic system to which it is attached to.', on_delete=django.db.models.deletion.CASCADE, to='greenhouse.hydroponicsystemcomponent')),
            ],
        ),
        migrations.CreateModel(
            name='PlantSpecies',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('common_name', models.CharField(help_text="A plant type's commmon name", max_length=100)),
                ('binomial_name', models.CharField(help_text="A plant type's latin name.", max_length=100)),
                ('genus', models.ForeignKey(help_text='The genus to which the species belongs to', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='species_set', to='greenhouse.plantgenus')),
            ],
            options={
                'verbose_name_plural': 'Plant species',
            },
        ),
        migrations.CreateModel(
            name='PlantComponent',
            fields=[
                ('site_entity', models.OneToOneField(help_text='Which site entity the component is a part of.', on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='plant_component', serialize=False, to='iot.siteentity')),
                ('spot_number', models.IntegerField(blank=True, help_text='The spot in the hydroponic system in which the plant is placed.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The datetime of creation.')),
                ('modified_at', models.DateTimeField(auto_now=True, help_text='The datetime of the last update.')),
                ('hydroponic_system', models.ForeignKey(help_text='In which hydroponic system the plant is in.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='plant_set', to='greenhouse.hydroponicsystemcomponent')),
                ('species', models.ForeignKey(help_text='The plants species as in taxus or genus', on_delete=django.db.models.deletion.PROTECT, related_name='plant_set', to='greenhouse.plantspecies')),
            ],
        ),
        migrations.CreateModel(
            name='HydroponicSystemPeripheral',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hydroponic_system', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='peripheral_component_edges', to='greenhouse.hydroponicsystemcomponent')),
                ('peripheral', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hydroponic_system_component_edges', to='iot.peripheralcomponent')),
            ],
        ),
        migrations.AddField(
            model_name='hydroponicsystemcomponent',
            name='peripheral_component_set',
            field=models.ManyToManyField(related_name='hydroponic_system_component_set', through='greenhouse.HydroponicSystemPeripheral', to='iot.PeripheralComponent'),
        ),
    ]
