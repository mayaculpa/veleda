# Generated by Django 3.1.6 on 2021-02-18 11:09

import address.models
import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import iot.models.peripheral
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('address', '0003_auto_20200830_1851'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ControllerComponentType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='The name of this type, e.g., ESP32 or RasberryPi4', max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The datetime of creation.')),
                ('modified_at', models.DateTimeField(auto_now=True, help_text='The datetime of the last update.')),
            ],
        ),
        migrations.CreateModel(
            name='DataPointType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='The name, e.g., air temperature or acidity.', max_length=50)),
                ('unit', models.CharField(help_text='The unit of the value, e.g., Â°C or pH.', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Site',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='The name of the site.', max_length=30)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The datetime of creation.')),
                ('modified_at', models.DateTimeField(auto_now=True, help_text='The datetime of the last update.')),
                ('address', address.models.AddressField(help_text='The postal address and the coordinates of the site', null=True, on_delete=django.db.models.deletion.SET_NULL, to='address.address')),
                ('owner', models.ForeignKey(help_text='The user that owns the site.', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SiteEntity',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='The name of the site entity which unifies all its components.', max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The datetime of creation.')),
                ('modified_at', models.DateTimeField(auto_now=True, help_text='The datetime of the last update.')),
                ('site', models.ForeignKey(help_text='The site to which the site entity belongs.', on_delete=django.db.models.deletion.CASCADE, to='iot.site')),
            ],
        ),
        migrations.CreateModel(
            name='ControllerComponent',
            fields=[
                ('site_entity', models.OneToOneField(help_text='Which site entity the component is a part of.', on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='controller_component', serialize=False, to='iot.siteentity')),
                ('channel_name', models.CharField(blank=True, default='', help_text='The channel name of the connected WebSocket.', max_length=128)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The datetime of creation.')),
                ('modified_at', models.DateTimeField(auto_now=True, help_text='The datetime of the last update.')),
                ('component_type', models.ForeignKey(help_text='The type of which this component is an instance of.', on_delete=django.db.models.deletion.CASCADE, to='iot.controllercomponenttype')),
            ],
        ),
        migrations.CreateModel(
            name='PeripheralComponent',
            fields=[
                ('site_entity', models.OneToOneField(help_text='Which site entity the component is a part of.', on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='peripheral_component', serialize=False, to='iot.siteentity')),
                ('peripheral_type', models.CharField(choices=[('InvalidPeripheral', 'Invalid peripheral'), ('DigitalIn', 'Digital in'), ('DigitalOut', 'Digital out'), ('AnalogIn', 'Analog in'), ('AnalogOut', 'Analog out'), ('PWM', 'PWM'), ('BME280', 'BME/BMP 280 sensor'), ('AsEcMeterI2C', 'Atlas Scientific EC Meter (I2C)'), ('CapacitiveSensor', 'Capacitive sensor'), ('I2CAdapter', 'I2C Adapter'), ('NeoPixel', 'NeoPixel array')], default='InvalidPeripheral', help_text='The type of this peripheral component.', max_length=64)),
                ('state', models.CharField(choices=[('adding', 'Adding'), ('added', 'Added'), ('failed', 'Failed'), ('removing', 'Removing'), ('removed', 'Removed')], help_text='The state of the controller task.', max_length=64)),
                ('other_parameters', models.JSONField(blank=True, default=dict, help_text='Setup parameters excl. the data point type parameters.', validators=[iot.models.peripheral.validate_other_parameters])),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The datetime of creation.')),
                ('modified_at', models.DateTimeField(auto_now=True, help_text='The datetime of the last update.')),
                ('controller_component', models.ForeignKey(help_text='Which controller controls and is connected to this peripheral.', on_delete=django.db.models.deletion.CASCADE, related_name='peripheral_component_set', to='iot.controllercomponent')),
            ],
        ),
        migrations.CreateModel(
            name='PeripheralDataPointType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('parameter_prefix', models.CharField(blank=True, max_length=64)),
                ('data_point_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='peripheral_component_edges', to='iot.datapointtype')),
                ('peripheral', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='data_point_type_edges', to='iot.peripheralcomponent')),
            ],
        ),
        migrations.AddField(
            model_name='peripheralcomponent',
            name='data_point_type_set',
            field=models.ManyToManyField(related_name='peripheral_component_set', through='iot.PeripheralDataPointType', to='iot.DataPointType'),
        ),
        migrations.CreateModel(
            name='DataPoint',
            fields=[
                ('time', models.DateTimeField(default=datetime.datetime.now, primary_key=True, serialize=False)),
                ('value', models.FloatField(help_text='The value of the data given by the data point type and peripheral.')),
                ('data_point_type', models.ForeignKey(help_text='The type of data recorded and its unit.', on_delete=django.db.models.deletion.CASCADE, related_name='data_point_set', to='iot.datapointtype')),
                ('peripheral_component', models.ForeignKey(help_text='The peripheral that generated the data point.', on_delete=django.db.models.deletion.CASCADE, related_name='data_point_set', to='iot.peripheralcomponent')),
            ],
            options={
                'ordering': ['-time'],
            },
        ),
        migrations.CreateModel(
            name='ControllerTask',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('task_type', models.CharField(choices=[('InvalidType', 'Invalid type'), ('AlertSensor', 'Alert sensor'), ('Calibrate', 'Calibrate peripheral'), ('PollSensor', 'Poll sensor'), ('ReadSensor', 'Read sensor'), ('SetRgbLed', 'Set RGB LED'), ('SetValue', 'Set value')], help_text='The type of the task on the controller', max_length=64)),
                ('state', models.CharField(choices=[('starting', 'Starting'), ('running', 'Running'), ('stopping', 'Stopping'), ('failed', 'Failed'), ('stopped', 'Stopped')], help_text='The state of the controller task.', max_length=64)),
                ('parameters', models.JSONField(blank=True, default=dict, help_text="The setup parameters excl. the task's ID, state and type. Theperipheral ID parameter has to use the peripheral component's ID instead thatof its site entity.")),
                ('run_until', models.DateTimeField(blank=True, help_text='Until when the task should run.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The datetime of creation.')),
                ('modified_at', models.DateTimeField(auto_now=True, help_text='The datetime of the last update.')),
                ('controller_component', models.ForeignKey(help_text='On which controller this task is executed.', on_delete=django.db.models.deletion.CASCADE, related_name='controller_task_set', to='iot.controllercomponent')),
            ],
        ),
        migrations.CreateModel(
            name='ControllerAuthToken',
            fields=[
                ('key', models.CharField(max_length=128, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('controller', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='auth_token', to='iot.controllercomponent')),
            ],
        ),
        migrations.CreateModel(
            name='ControllerMessage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The datetime when the message was received')),
                ('message', models.JSONField()),
                ('request_id', models.CharField(blank=True, default='', help_text='The ID of the request, to enable tracking requests', max_length=255)),
                ('controller', models.ForeignKey(help_text='The controller associated with the message.', on_delete=django.db.models.deletion.CASCADE, to='iot.controllercomponent')),
            ],
            options={
                'unique_together': {('created_at', 'controller')},
            },
        ),
    ]
